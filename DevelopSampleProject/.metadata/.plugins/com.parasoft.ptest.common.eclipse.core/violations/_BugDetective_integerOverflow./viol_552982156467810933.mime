MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=U0uU9LcYvC7nKwYXTL1tCNhaW6bb7ggYFCEe
StorageVersion: v1

--U0uU9LcYvC7nKwYXTL1tCNhaW6bb7ggYFCEe

<?xml version='1.0' encoding='UTF-8'?><ResultsList path="/BugDetective/integerOverflow.c"><VersionInfos><StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricEstimationInfo" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2"/></VersionInfos></ResultsList>
--U0uU9LcYvC7nKwYXTL1tCNhaW6bb7ggYFCEe

<?xml version='1.0' encoding='UTF-8'?><ResultInfo resultId="IFlowAnalysisViolation" ownerId="com.parasoft.xtest.checkers.api.standards" violKeys="66_/BugDetective/integerOverflow.c;67_/BugDetective/integerOverflow.c"><FlowViol msg="Usage of possibly overflowed/underflowed value: total_len" ln="29" ruleSAFMsg="Point of using possibly overflowed/underflowed value" auth="root" sev="2" rule="MISRAC2012-DIR_4_14-b" ruleSCSCMsg="Point where value is defined by tainting function" tool="c++test" id="1907083985" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="29" locStartPos="0" locEndLn="30" locEndPos="0" locFile="/BugDetective/integerOverflow.c" FirstElSrcRngStartln="23" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="24" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/BugDetective/integerOverflow.c"><Props><Prop key="Tracked variables" val="Tainted data"/></Props><ElDescList><ElDesc srcRngStartln="18" srcRngStartPos="0" srcRngEndLn="19" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="18" ElType="." desc="int i, header_len;" rngLn="18"><Props/></ElDesc><ElDesc srcRngStartln="19" srcRngStartPos="0" srcRngEndLn="20" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="19" ElType="." desc="long msg_len;" rngLn="19"><Props/></ElDesc><ElDesc srcRngStartln="20" srcRngStartPos="0" srcRngEndLn="21" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="20" ElType="." desc="size_t total_len;" rngLn="20"><Props/></ElDesc><ElDesc srcRngStartln="21" srcRngStartPos="0" srcRngEndLn="22" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="21" ElType="." desc="char *msg;" rngLn="21"><Props/></ElDesc><ElDesc srcRngStartln="23" srcRngStartPos="0" srcRngEndLn="24" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="23" ElType=".C" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" rngLn="23"><Props><Prop key="Tracked variables" val="buffer[]"/></Props><Anns><Ann msg="Point where value is defined by tainting function" kind="cause"/><Ann msg="Tainted data: buffer[]" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="24" srcRngStartPos="0" srcRngEndLn="25" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="24" ElType="!" desc="msg_len = atol(buffer);" rngLn="24"><Props/></ElDesc><ElDesc srcRngStartln="25" srcRngStartPos="0" srcRngEndLn="26" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="25" ElType="." desc="header_len = strlen(header);" rngLn="25"><Props><Prop key="Tracked variables" val="msg_len"/></Props><Anns><Ann msg="Tainted data: msg_len" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="26" srcRngStartPos="0" srcRngEndLn="27" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="26" ElType="." desc="total_len = header_len;" rngLn="26"><Props/></ElDesc><ElDesc srcRngStartln="27" srcRngStartPos="0" srcRngEndLn="28" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="27" ElType="!" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" rngLn="27"><Props/><Anns><Ann msg="Point of possible overflow/underflow" kind="info"/></Anns></ElDesc><ElDesc srcRngStartln="29" srcRngStartPos="0" srcRngEndLn="30" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="29" ElType=".P" desc="malloc(...)" rngLn="29"><Props><Prop key="Tracked variables" val="total_len"/></Props><Anns><Ann msg="Tainted data: total_len" kind="var"/><Ann msg="Point of using possibly overflowed/underflowed value" kind="point"/></Anns></ElDesc></ElDescList></FlowViol><FlowViol msg="Usage of possibly overflowed/underflowed value: total_len" ln="38" ruleSAFMsg="Point of using possibly overflowed/underflowed value" auth="root" sev="2" rule="MISRAC2012-DIR_4_14-b" ruleSCSCMsg="Point where value is defined by tainting function" tool="c++test" id="-1363473727" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="38" locStartPos="0" locEndLn="39" locEndPos="0" locFile="/BugDetective/integerOverflow.c" FirstElSrcRngStartln="23" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="24" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/BugDetective/integerOverflow.c"><Props><Prop key="Tracked variables" val="Tainted data"/></Props><ElDescList><ElDesc srcRngStartln="18" srcRngStartPos="0" srcRngEndLn="19" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="18" ElType="." desc="int i, header_len;" rngLn="18"><Props/></ElDesc><ElDesc srcRngStartln="19" srcRngStartPos="0" srcRngEndLn="20" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="19" ElType="." desc="long msg_len;" rngLn="19"><Props/></ElDesc><ElDesc srcRngStartln="20" srcRngStartPos="0" srcRngEndLn="21" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="20" ElType="." desc="size_t total_len;" rngLn="20"><Props/></ElDesc><ElDesc srcRngStartln="21" srcRngStartPos="0" srcRngEndLn="22" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="21" ElType="." desc="char *msg;" rngLn="21"><Props/></ElDesc><ElDesc srcRngStartln="23" srcRngStartPos="0" srcRngEndLn="24" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="23" ElType=".C" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" rngLn="23"><Props><Prop key="Tracked variables" val="buffer[]"/></Props><Anns><Ann msg="Point where value is defined by tainting function" kind="cause"/><Ann msg="Tainted data: buffer[]" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="24" srcRngStartPos="0" srcRngEndLn="25" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="24" ElType="!" desc="msg_len = atol(buffer);" rngLn="24"><Props/></ElDesc><ElDesc srcRngStartln="25" srcRngStartPos="0" srcRngEndLn="26" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="25" ElType="." desc="header_len = strlen(header);" rngLn="25"><Props><Prop key="Tracked variables" val="msg_len"/></Props><Anns><Ann msg="Tainted data: msg_len" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="26" srcRngStartPos="0" srcRngEndLn="27" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="26" ElType="." desc="total_len = header_len;" rngLn="26"><Props/></ElDesc><ElDesc srcRngStartln="27" srcRngStartPos="0" srcRngEndLn="28" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="27" ElType="!" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" rngLn="27"><Props/><Anns><Ann msg="Point of possible overflow/underflow" kind="info"/></Anns></ElDesc><ElDesc srcRngStartln="29" srcRngStartPos="0" srcRngEndLn="30" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="29" ElType="." desc="msg = (char*)malloc(total_len); /* VIOLATION, USAGE OF OVERFLOWED VALUE */" rngLn="29"><Props><Prop key="Tracked variables" val="total_len"/></Props><Anns><Ann msg="Tainted data: total_len" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="30" srcRngStartPos="0" srcRngEndLn="31" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="30" ElType="." desc="if (!msg) {" rngLn="30"><Props/><Anns><Ann msg="Condition evaluation: !msg (assuming false)" kind="condEval"/></Anns></ElDesc><ElDesc srcRngStartln="34" srcRngStartPos="0" srcRngEndLn="35" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="34" ElType="." desc="strcpy(msg, header);" rngLn="34"><Props/></ElDesc><ElDesc srcRngStartln="36" srcRngStartPos="0" srcRngEndLn="37" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="36" ElType="." desc="recv(socket, msg + msg_len, msg_len, MSG_NOSIGNAL);" rngLn="36"><Props/></ElDesc><ElDesc srcRngStartln="38" srcRngStartPos="0" srcRngEndLn="39" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="38" ElType=".P" desc="for (i = header_len; i &lt; total_len; i++) { /* VIOLATION, USAGE OF OVERFLOWED VALUE */" rngLn="38"><Props><Prop key="Tracked variables" val="total_len"/></Props><Anns><Ann msg="Tainted data: total_len" kind="var"/><Ann msg="Point of using possibly overflowed/underflowed value" kind="point"/></Anns></ElDesc></ElDescList></FlowViol></ResultInfo>
--U0uU9LcYvC7nKwYXTL1tCNhaW6bb7ggYFCEe

<?xml version='1.0' encoding='UTF-8'?><ResultInfo resultId="ICodingStandardsViolation" ownerId="com.parasoft.xtest.checkers.api.standards" violKeys="255_/BugDetective/integerOverflow.c;258_/BugDetective/integerOverflow.c;254_/BugDetective/integerOverflow.c;273_/BugDetective/integerOverflow.c;268_/BugDetective/integerOverflow.c;260_/BugDetective/integerOverflow.c;263_/BugDetective/integerOverflow.c;264_/BugDetective/integerOverflow.c;257_/BugDetective/integerOverflow.c;250_/BugDetective/integerOverflow.c;265_/BugDetective/integerOverflow.c;274_/BugDetective/integerOverflow.c;259_/BugDetective/integerOverflow.c;267_/BugDetective/integerOverflow.c;270_/BugDetective/integerOverflow.c;271_/BugDetective/integerOverflow.c;249_/BugDetective/integerOverflow.c;269_/BugDetective/integerOverflow.c;266_/BugDetective/integerOverflow.c;276_/BugDetective/integerOverflow.c;262_/BugDetective/integerOverflow.c;277_/BugDetective/integerOverflow.c;253_/BugDetective/integerOverflow.c;251_/BugDetective/integerOverflow.c;275_/BugDetective/integerOverflow.c;261_/BugDetective/integerOverflow.c;272_/BugDetective/integerOverflow.c;256_/BugDetective/integerOverflow.c;252_/BugDetective/integerOverflow.c"><StdViol msg="The basic numerical type 'int' should not be used" ln="16" sev="4" auth="root" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="16" locStartPos="18" locEndLn="16" locEndPos="19" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Parameter 'len' is not used in function 'readMessage'" ln="16" sev="4" auth="root" rule="MISRAC2012-RULE_2_7-a" tool="c++test" cat="MISRAC2012-RULE_2_7" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="16" locStartPos="48" locEndLn="16" locEndPos="49" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Prototype of function 'readMessage' does not precede function definition" ln="16" sev="2" auth="root" rule="MISRAC2012-RULE_8_4-a" tool="c++test" cat="MISRAC2012-RULE_8_4" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="16" locStartPos="6" locEndLn="16" locEndPos="7" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Unused function's &quot;recv&quot; return value" ln="36" sev="2" auth="root" rule="MISRAC2012-RULE_17_7-a" tool="c++test" cat="MISRAC2012-RULE_17_7" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="36" locStartPos="1" locEndLn="36" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="'malloc' function should not be used" ln="29" sev="2" auth="root" rule="MISRAC2012-DIR_4_12-a" tool="c++test" cat="MISRAC2012-DIR_4_12" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="29" locStartPos="14" locEndLn="29" locEndPos="15" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The basic numerical type 'long' should not be used" ln="19" sev="4" auth="root" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="19" locStartPos="1" locEndLn="19" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The expression of the 'essentially unsigned' type is assigned to an object with the 'essentially signed' type" ln="25" sev="2" auth="root" rule="MISRAC2012-RULE_10_3-b" tool="c++test" cat="MISRAC2012-RULE_10_3" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="25" locStartPos="1" locEndLn="25" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially unsigned' type" ln="26" sev="2" auth="root" rule="MISRAC2012-RULE_10_3-b" tool="c++test" cat="MISRAC2012-RULE_10_3" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="26" locStartPos="1" locEndLn="26" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The basic numerical type 'int' should not be used" ln="16" sev="4" auth="root" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="16" locStartPos="44" locEndLn="16" locEndPos="45" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The 'buffer' object is also defined in other translation units" ln="8" sev="2" auth="root" rule="MISRAC2012-RULE_8_6-a" tool="c++test" cat="MISRAC2012-RULE_8_6" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="8" locStartPos="5" locEndLn="8" locEndPos="6" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Operands of the '+=' operator have different essential types: 'unsigned long' and 'long'" ln="27" sev="2" auth="root" rule="MISRAC2012-RULE_10_4-a" tool="c++test" cat="MISRAC2012-RULE_10_4" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="27" locStartPos="1" locEndLn="27" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The variable 'msg' used as the left hand side operand of the '+' operator has a pointer type" ln="36" sev="4" auth="root" rule="MISRAC2012-RULE_18_4-a" tool="c++test" cat="MISRAC2012-RULE_18_4" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="36" locStartPos="14" locEndLn="36" locEndPos="15" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The basic numerical type 'int' should not be used" ln="18" sev="4" auth="root" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="18" locStartPos="1" locEndLn="18" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="'malloc' function should not be used" ln="29" sev="2" auth="root" rule="MISRAC2012-RULE_21_3-a" tool="c++test" cat="MISRAC2012-RULE_21_3" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="29" locStartPos="14" locEndLn="29" locEndPos="15" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Function with pointer return type returns '0'" ln="31" sev="2" auth="root" rule="MISRAC2012-RULE_11_9-a" tool="c++test" cat="MISRAC2012-RULE_11_9" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="31" locStartPos="9" locEndLn="31" locEndPos="10" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Function with pointer return type returns '0'" ln="31" sev="2" auth="root" rule="MISRAC2012-RULE_11_9-b" tool="c++test" cat="MISRAC2012-RULE_11_9" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="31" locStartPos="9" locEndLn="31" locEndPos="10" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Declaration of object 'buffer' does not precede its definition" ln="8" sev="2" auth="root" rule="MISRAC2012-RULE_8_4-a" tool="c++test" cat="MISRAC2012-RULE_8_4" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="8" locStartPos="5" locEndLn="8" locEndPos="6" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Provide only one exit point in 'readMessage' function" ln="31" sev="4" auth="root" rule="MISRAC2012-RULE_15_5-a" tool="c++test" cat="MISRAC2012-RULE_15_5" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="31" locStartPos="2" locEndLn="31" locEndPos="3" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Pointer to void type should not be converted to pointer to object type 'char *'" ln="29" sev="4" auth="root" rule="MISRAC2012-RULE_11_5-a" tool="c++test" cat="MISRAC2012-RULE_11_5" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="29" locStartPos="7" locEndLn="29" locEndPos="8" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Operands of the '&lt;' operator have different essential types: 'int' and 'unsigned long'" ln="38" sev="2" auth="root" rule="MISRAC2012-RULE_10_4-a" tool="c++test" cat="MISRAC2012-RULE_10_4" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="38" locStartPos="22" locEndLn="38" locEndPos="23" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Usage of 'atol' function is not allowed" ln="24" sev="2" auth="root" rule="MISRAC2012-RULE_21_7-a" tool="c++test" cat="MISRAC2012-RULE_21_7" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="24" locStartPos="11" locEndLn="24" locEndPos="12" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Provide only one exit point in 'readMessage' function" ln="41" sev="4" auth="root" rule="MISRAC2012-RULE_15_5-a" tool="c++test" cat="MISRAC2012-RULE_15_5" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="41" locStartPos="1" locEndLn="41" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The function 'decode' is referenced only in the translation unit where it is defined" ln="10" sev="4" auth="root" rule="MISRAC2012-RULE_8_7-a" tool="c++test" cat="MISRAC2012-RULE_8_7" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="10" locStartPos="5" locEndLn="10" locEndPos="6" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The 'buffer' object has incompatible declarations in other translation units" ln="8" sev="2" auth="root" rule="MISRAC2012-RULE_8_3-c" tool="c++test" cat="MISRAC2012-RULE_8_3" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="8" locStartPos="5" locEndLn="8" locEndPos="6" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="The argument number '3' ('essentially signed' type) is passed to the function 'recv' as a parameter with the 'essentially unsigned' type" ln="36" sev="2" auth="root" rule="MISRAC2012-RULE_10_3-b" tool="c++test" cat="MISRAC2012-RULE_10_3" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="36" locStartPos="29" locEndLn="36" locEndPos="30" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Unused function's &quot;recv&quot; return value" ln="23" sev="2" auth="root" rule="MISRAC2012-RULE_17_7-a" tool="c++test" cat="MISRAC2012-RULE_17_7" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="23" locStartPos="1" locEndLn="23" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Unused function's &quot;strcpy&quot; return value" ln="34" sev="2" auth="root" rule="MISRAC2012-RULE_17_7-a" tool="c++test" cat="MISRAC2012-RULE_17_7" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="34" locStartPos="1" locEndLn="34" locEndPos="2" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Pass parameter &quot;header&quot; with const specifier" ln="16" sev="4" auth="root" rule="MISRAC2012-RULE_8_13-a" tool="c++test" cat="MISRAC2012-RULE_8_13" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="16" locStartPos="36" locEndLn="16" locEndPos="37" locFile="/BugDetective/integerOverflow.c"/><StdViol msg="Prototype of function 'decode' does not precede function definition" ln="10" sev="2" auth="root" rule="MISRAC2012-RULE_8_4-a" tool="c++test" cat="MISRAC2012-RULE_8_4" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="10" locStartPos="5" locEndLn="10" locEndPos="6" locFile="/BugDetective/integerOverflow.c"/></ResultInfo>
--U0uU9LcYvC7nKwYXTL1tCNhaW6bb7ggYFCEe--
